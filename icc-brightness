#! /usr/bin/env python3
"""Control OLED display brightness by applying ICC color profiles.

icc-brightness set brightness max-brightness - set brightness manually
icc-brightness apply - apply brightness from system setting
icc-brightness watch - continuously update to system setting
icc-brightness clean - remove all profiles generated by us
icc-brightness list  - list device models we can see
"""

import os
import subprocess
import time
import fcntl
import signal
import threading
import logging
import argparse
import re
import unicodedata
from types import SimpleNamespace

TEMP_FOLDER = '/tmp'
BACKLIGHT_PATH = '/sys/class/backlight/intel_backlight'
BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'brightness')
MAX_BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'max_brightness')

CWD = os.path.dirname(__file__)
ICC_BRIGHTNESS_GEN = os.path.join(CWD, 'icc-brightness-gen')

LOCK = threading.Lock()

target = SimpleNamespace(device=None, slug='')


def clean():
    """Find all profile generated by us and remove them."""
    out = subprocess.check_output(['colormgr', 'get-profiles'])

    object_path = None
    filename = None
    for line in out.decode('utf8').split('\n'):
        if line.startswith('Object Path:'):
            object_path = line.split(':')[1].lstrip()
            continue
        if line.startswith('Filename:'):
            filename = line.split(':')[1].lstrip()
            if filename.find(f'icc/{target.slug}brightness_') < 0:
                continue
            logging.info('Removing: %s', filename)
            subprocess.run(
                ['colormgr', 'delete-profile', object_path], check=True
            )
            subprocess.run(['rm', filename], check=True)


def list_devices():
    """List all device models visible to us"""
    out = subprocess.check_output(
        ['colormgr', 'get-devices-by-kind', 'display']
    )
    for line in out.decode('utf8').split('\n'):
        if line.startswith('Model:'):
            print(line.split(':')[1].lstrip())


def get_object_path(out):
    """Extract the desired object path from the output"""

    # If there is more than one device being managed, there will be multiple data blocks
    # separated by blank lines. In each block the 'Object Path' line will always occur
    # before the 'Model' or 'Embeded' line, so we repeatedly set the object_path and
    # only break when we find an appropriate match. If we are not targeting a specific
    # device, we just pick the first embedded device we find.

    object_path = None
    for line in out.decode('utf8').split('\n'):
        if line.startswith('Object Path:'):
            object_path = line.split(':')[1].lstrip()
            if target.device is None:
                break
        elif target.device is not None and line.startswith('Model:'):
            model_name = line.split(':')[1].lstrip()
            if model_name.startswith(target.device):
                break
        elif target.device is None:
            if line.startswith('Embedded:'):
                embedded = line.split(':')[1].lstrip()
                if embedded == "Yes":
                    break
        else:
            if line.startswith('Model:'):
                model_name = line.split(':')[1].lstrip()
                if model_name.startswith(target.device):
                    break
    return object_path


def find_profile(filename):
    try:
        out = subprocess.check_output(
            ['colormgr', 'find-profile-by-filename', filename]
        )
    except subprocess.CalledProcessError:
        return None
    return get_object_path(out)


def get_device_id():
    out = subprocess.check_output(
        ['colormgr', 'get-devices-by-kind', 'display']
    )
    return get_object_path(out)


def rounded(brightness, max_brightness, factor=0.05):
    """
    return BRIGHTNESS rounded to FACTOR increments of MAX_BRIGHTNESS

    This avoids strange brightness settings like 0.61, due to float rounding anomalies.
    """
    return int(
        (
            ((int((brightness / max_brightness) * 100)) //
             (100 * factor)) * 0.05
        ) * max_brightness
    )


last_icc_filename = None


def icc_brightness(brightness, max_brightness):

    brightness = rounded(brightness, max_brightness)
    icc_filename = '%sbrightness_%d_%d.icc' % (
        target.slug, brightness, max_brightness
    )
    logging.debug('Apply profile %s', icc_filename)
    object_path = find_profile(icc_filename)
    device_id = get_device_id()
    if object_path is None:
        icc_filepath = os.path.join(TEMP_FOLDER, icc_filename)
        subprocess.run(
            [
                ICC_BRIGHTNESS_GEN, icc_filepath,
                str(brightness),
                str(max_brightness)
            ],
            check=True
        )
        subprocess.check_output(['colormgr', 'import-profile', icc_filepath])
        object_path = find_profile(icc_filename)
        try:
            subprocess.run(
                [
                    'colormgr', 'device-add-profile',
                    device_id, object_path
                ],
                check=True
            )
        except subprocess.CalledProcessError as ex:
            logging.warning('Failed to add profile: %s', ex.stdout)

    subprocess.run(
        [
            'colormgr', 'device-make-profile-default',
            device_id, object_path
        ],
        check=True
    )

    global last_icc_filename
    if last_icc_filename is not None and last_icc_filename != icc_filename:
        object_path = find_profile(last_icc_filename)
        subprocess.run(['colormgr', 'delete-profile', object_path], check=True)
    last_icc_filename = icc_filename


def icc_brightness_apply():
    with open(BRIGHTNESS_PATH) as infile:
        brightness = int(infile.readline())
    with open(MAX_BRIGHTNESS_PATH) as infile:
        max_brightness = int(infile.readline())
    icc_brightness(brightness, max_brightness)


def handler(signum, frame):
    logging.debug("Running handler for signum %d and frame %s" % (signum, frame))
    if LOCK.acquire(blocking=False):
        try:
            icc_brightness_apply()
        except subprocess.CalledProcessError as ex:
            logging.exception('Error during call to icc_brightness')
            logging.error(ex.stdout)
        except BaseException:
            logging.exception('Error during call to icc_brightness')
        finally:
            LOCK.release()


# Borrowed from Django
def slugify(value):
    """
    Converts to lowercase, removes non-word characters (alphanumerics and
    underscores) and converts spaces to hyphens. Also strips leading and
    trailing whitespace.
    """
    value = (
        unicodedata.normalize('NFKD', value).encode('ascii',
                                                    'ignore').decode('ascii')
    )
    value = re.sub(r'[^\w\s-]', '', value).strip().lower()
    return re.sub(r'[-\s]+', '-', value)


def main():
    log_format = '%(asctime)s - %(levelname)s: %(message)s'
    logging.basicConfig(level=logging.INFO, format=log_format)
    logger = logging.getLogger()

    parser = argparse.ArgumentParser(
        description='Control OLED display brightness by applying ICC color profiles'
    )

    subparsers = parser.add_subparsers(dest='action')
    parser.add_argument('--target', help='prefix of device models to target')
    parser.add_argument('--loglevel', help='set the logging level')
    parser.add_argument('--logfile', help='log to the specified file')
    subparsers.add_parser('apply', help='apply brightness from system setting')
    subparsers.add_parser(
        'watch', help='continuously update to system setting'
    )
    subparsers.add_parser('clean', help='remove all profiles generated by us')
    subparsers.add_parser('list', help='list visible device models')
    set_parser = subparsers.add_parser('set', help='set brightness manually')
    set_parser.add_argument('brightness', type=int)
    set_parser.add_argument('max_brightness', type=int)

    args = parser.parse_args()

    if args.target is not None:
        target.device = args.target
        target.slug = slugify(target.device) + '-'

    if args.loglevel is not None:
        loglevel = args.loglevel.upper()
        numeric_level = getattr(logging, loglevel, None)
        if not isinstance(numeric_level, int):
            raise ValueError('Invalid log level: %s' % args.loglevel)
        logger.setLevel(numeric_level)
        logger.info('Setting log level: %s' % loglevel)

    if args.logfile is not None:
        logfile = args.logfile
        fh = logging.FileHandler(logfile, mode='a')
        fh.setFormatter(logging.Formatter(log_format))
        logger.addHandler(fh)
        logger.info('Logging to file: %s' % logfile)

    if args.action == 'clean':
        clean()

    elif args.action == 'apply':
        icc_brightness_apply()

    elif args.action == 'watch':
        try:
            icc_brightness_apply()
        except BaseException:
            logging.exception('device-make-profile-default')
        signal.signal(signal.SIGIO, handler)
        fd = os.open(BACKLIGHT_PATH, os.O_RDONLY)
        fcntl.fcntl(fd, fcntl.F_SETSIG, 0)
        fcntl.fcntl(fd, fcntl.F_NOTIFY, fcntl.DN_MODIFY | fcntl.DN_MULTISHOT)

        while True:
            time.sleep(1000000)

    elif args.action == 'list':
        list_devices()
    elif (args.action == 'set'):
        icc_brightness(args.brightness, args.max_brightness)
    else:
        parser.print_help()


if __name__ == '__main__':
    main()
